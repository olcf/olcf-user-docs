.. _jupyter-on-frontier:

**********************
Jupyter on Frontier
**********************

Frontier hosts a JupyterHub server to provide users with an interface for using `JupyterLab <https://jupyterlab.readthedocs.io/en/latest/>`__ and `Jupyter Notebooks <https://docs.jupyter.org/en/latest/#what-is-a-notebook>`__.
Jupyter Notebooks allow users to combine live code, visualizations, interactive controls, and 
textual descriptions in a single, shareable document. Currently, Jupyter on Frontier supports a Python 3.11 kernel, but if 
additional kernels are needed, please contact the OLCF User Assistance Center at help@olcf.ornl.gov or see the instructions
for creating and exposing a custom environment in :doc:`Jupyter Visibility </software/python/jupyter_envs>`.


.. note::
    If you are a moderate user accustomed to using :ref:`Jupyter on Marble <jupyter_overview>` then using Jupyter on Frontier will feel familiar to you.
    The primary difference will be how to request a Jupyter session and you will now use Frontier compute resources instead of Marble.


Access
-------

All OLCF moderate accounts should have access to Jupyter on Frontier at https://jupyter.frontier.olcf.ornl.gov.

After navigating to the JupyterHub URL, you will be prompted to log in using your OLCF account name and PASSCODE on the following page:

.. figure:: /images/jupyter/frontier_login.png
   :width: 600px
   :align: center

After successfully logging in and starting your Jupyter server, you will be presented with account parameters to launch your Jupyter session:

.. figure:: /images/jupyter/frontier_batch_server_option.png
   :width: 800px
   :align: center

When requesting a Jupyter session, the Frontier :ref:`frontier-scheduling` will be applied to your Jupyter session request.

.. warning::
    If your Jupyter session is not launched in 5 minutes, it will timeout and you will need to re-submit your request.


Launching a Notebook
--------------------
Once a Jupyter session is running, you will be placed in your Frontier home directory. From here, you can launch a new notebook 
by clicking the **Python 3** icon under the **Notebook** section of the **Launcher** tab.
The default Jupyter kernel uses a Python 3.11 kernel, or launch a custom kernel if you have created and exposed one as 
described in :doc:`Jupyter Visibility </software/python/jupyter_envs>`.

.. figure:: /images/jupyter/frontier_launch_page.png
   :width: 800px
   :align: center

\

.. tip::
    You can naviagate to any directory normally accessible to you on Frontier by navigating to `File >> Open from Path...` and inputting
    the full path to the directory you wish to access. E.g., `/lustre/orion/scratch/user/project`.


API Token
---------
Users have the option to interact with their Jupyter session programmatically via the JupyterHub REST API.
Tokens can be generated by navigating to `File >> Hub Control Panel >> Token`. Once on the Token page, you can
specify the token parameters and click the **Request new API Token** button to generate a new token.

.. figure:: /images/jupyter/frontier_token_page.png
   :width: 800px
   :align: center

Additionally, any currently active tokens can be viewed and managed in the **API Tokens** and **Authorized Applications** subsections on the Token page

Example PyTorch Jupyter Notebook
---------------------------------
To enable a Jupyter notebook to use a pre-existing PyTorch environment, it should be as simple as installing
and configuring the ipykernel package in your conda environment and then selecting that kernel in your notebook.

.. code:: bash

   module load miniforge3
   source activate <your_env_name>
   pip install ipykernel
   python -m ipykernel install --user --name <your_env_name> --display-name <your_env_name>

The following will walk you through creating a simple PyTorch environment on Frontier and making the kernel
visible to Jupyter notebooks. For more details on PyTorch including important performance considerations, please see :doc:`/software/analytics/pytorch_frontier`.

From a Frontier login node, load the following modules:

.. code:: bash

   module load PrgEnv-gnu/8.6.0
   module load miniforge3/23.11.0-0
   module load rocm/6.4.1
   module load craype-accel-amd-gfx90a

Next, create a new conda environment with the ipykernel, then install PyTorch with ROCm support:

.. code:: bash

   conda create -n pytorch_env python=3.12 ipykernel -c conda-forge
   source activate pytorch_env
   pip install numpy torch==2.8.0 --index-url https://download.pytorch.org/whl/rocm6.4

Finally, make the kernel visible to Jupyter notebooks:

.. code:: bash

   python -m ipykernel install --user --name pytorch_env --display-name "PyTorch (ROCm)"

If successful, you should see the kernel on the JupyterHub launcher page:

.. figure:: /images/jupyter/frontier_launch_pytorch.png
   :width: 800px
   :align: center

\

Additionally, you can verify that Jupyter notebook is seeing all GPUs on a Frontier compute node by running the following code in a notebook cell:

.. figure:: /images/jupyter/frontier_torch_check.png
   :width: 800px
   :align: center

\


